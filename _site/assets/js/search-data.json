{"0": {
    "doc": "React basics",
    "title": "JSX",
    "content": "Generate HTML from JS . JSX is a way of writing JavaScript and HTML together. JSX is a shortcut for using React.createElement(). JSX has to be compiled. This is what JSX looks like before and after: . const h1 = &lt;h1&gt;Hello World&lt;/h1&gt;; . return React.createElement(\"div\", null, \"Hello world!\"); . Another example, with nesting: . return ( &lt;div&gt; Hello world! &lt;span&gt;Hi&lt;/span&gt; &lt;/div&gt; ); . return React.createElement( \"div\", null, \"Hello world!\", React.createElement(\"span\", null, \"Hi\") ); . Multi-line JSX . Multi-line JSX expressions are wrapped with parens: . return ( &lt;a href=\"https://www.example.com\"&gt; &lt;h1&gt;Click me!&lt;/h1&gt; &lt;/a&gt; ); . JSX Elements . A JSX element must have exactly one outermost element. React has “Fragments”, which group elements without creating a DOM node to hold them. (Why is this necessary?) . render() { return ( &lt;React.Fragment&gt; &lt;ChildA /&gt; &lt;ChildB /&gt; &lt;ChildC /&gt; &lt;/React.Fragment&gt; ); } . class Columns extends React.Component { render() { return ( &lt;&gt; &lt;td&gt;Hello&lt;/td&gt; &lt;td&gt;World&lt;/td&gt; &lt;/&gt; ); } } . If statements in React . JSX In Depth – React: . if statements and for loops are not expressions in JavaScript, so they can’t be used in JSX directly. Instead, you can put these in the surrounding code. function NumberDescriber(props) { let description; if (props.number % 2 == 0) { description = &lt;strong&gt;even&lt;/strong&gt;; } else { description = &lt;i&gt;odd&lt;/i&gt;; } return &lt;div&gt;{props.number} is an {description} number&lt;/div&gt;; } . Another option is to use the conditional operator (the ternary operator, known as such because it’s the only JS operator that takes three arguments). Following is an example of the conditional operator from Codecademy. const headline = ( &lt;h1&gt; { age &gt;= drinkingAge ? 'Buy Drink' : 'Do Teen Stuff' } &lt;/h1&gt; ); . Yet another option is to use the &amp;&amp; operator. Similar to the conditional operator, if the first argument is true, is returns the second argument. But there is no third argument, so if the first argument is false, it does nothing. Following is an example of the &amp;&amp; operator from Codecademy. const tasty = ( &lt;ul&gt; &lt;li&gt;Applesauce&lt;/li&gt; { !baby &amp;&amp; &lt;li&gt;Pizza&lt;/li&gt; } { age &gt; 15 &amp;&amp; &lt;li&gt;Brussels Sprouts&lt;/li&gt; } { age &gt; 20 &amp;&amp; &lt;li&gt;Oysters&lt;/li&gt; } { age &gt; 25 &amp;&amp; &lt;li&gt;Grappa&lt;/li&gt; } &lt;/ul&gt; ); . Here’s an overview of these options, again from Codecademy. | The &amp;&amp; and ternary operators are more concise, choose either of these when possible. | Choose the &amp;&amp; over a ternary when you want an action to occur (or not) based on a single condition. | Choose an if/else/else if statement when you need to extrapolate logic to make it easier to read and understand. | . More: . | Conditional Rendering – React | Lists and Keys – React | How do you use the ? : (conditional) operator in JavaScript? - Stack Overflow | | [How &amp;&amp; and |   | Operators Really Work in JavaScript](https://dmitripavlutin.com/javascript-and-or-logical-operators/) | . | . JSX Syntax . | Use className instead of class | Self closing tags are required. | Use curly braces to wrap JavaScript inside of a JSX element. | . ",
    "url": "http://localhost:4000/react-basics.html#jsx",
    "relUrl": "/react-basics.html#jsx"
  },"1": {
    "doc": "React basics",
    "title": "Rendering",
    "content": "ReactDOM.render(elementToRender,whereToRender) . When do you pass &lt;Element&gt; and when do you pass element? . | Pass &lt;Element&gt; if you’re calling a React component. | Pass element when you’re just using a variable with a JSX expression. | . ",
    "url": "http://localhost:4000/react-basics.html#rendering",
    "relUrl": "/react-basics.html#rendering"
  },"2": {
    "doc": "React basics",
    "title": "Events",
    "content": "JSX elements can have event listeners just like HTML elements. Events are how we add interaction to React apps. An Event Listener is a JSX attribute. Its name should be something like onClick – the word on, and the type of the event. Its value should be a function, either called by name or an anonymous function. To handle an event, we define an event handler function, and pass it as a prop. A handler function should be called something like handleClick – the word event, and the type of event being handled. // talker.js import React from 'react'; import ReactDOM from 'react-dom'; import { Button } from './Button'; class Talker extends React.Component { handleClick() { let speech = ''; for (let i = 0; i &lt; 10000; i++) { speech += 'blah '; } alert(speech); } render() { // onClick here is arbitrary, it's just the name we'll use later, but it doens't do anything special and it can be any other name return &lt;Button onClick={this.handleClick} /&gt;; } } ReactDOM.render( &lt;Talker /&gt;, document.getElementById('app') ); // Button.js import React from 'react'; export class Button extends React.Component { render() { return ( // onClick here is a special attribute that creates an event listener. It has to be called `onClick` &lt;button onClick={this.props.onClick}&gt; Click me! &lt;/button&gt; ); } } . example from Codecademy . Supported events: Clipboard Events, Composition Events, Keyboard Events, Focus Events, Form Events, Generic Events, Mouse Events, Pointer Events, Selection Events, Touch Events, UI Events, Wheel Events, Media Events, Image Events, Animation Events, Transition Events, Other Events . ",
    "url": "http://localhost:4000/react-basics.html#events",
    "relUrl": "/react-basics.html#events"
  },"3": {
    "doc": "React basics",
    "title": "props",
    "content": "Components pass information around using an object called props. When using a component, we can pass values to its props object using JSX attributes. this.props.children will return a component’s children. Multiple children are returned in an array. A single child is returned as-is, not inside an array. If there are no children, undefined is returned. Component.defaultProps = {} can set defaults for when props are not passed over. Call it after defining the class. ",
    "url": "http://localhost:4000/react-basics.html#props",
    "relUrl": "/react-basics.html#props"
  },"4": {
    "doc": "React basics",
    "title": "State",
    "content": "State is persistent private “memory” held internally by a component. State is initialized in the component’s constructor method, which is called when creating a new instance of the class. class Clock extends React.Component { constructor(props) { super(props); this.state = {date: new Date()}; } render() { return ( &lt;div&gt; &lt;h1&gt;Hello, world!&lt;/h1&gt; &lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt; &lt;/div&gt; ); } } ReactDOM.render( &lt;Clock /&gt;, document.getElementById('root') ); . Example from React docs . ",
    "url": "http://localhost:4000/react-basics.html#state",
    "relUrl": "/react-basics.html#state"
  },"5": {
    "doc": "React basics",
    "title": "React basics",
    "content": "React requirements and basic concepts. | JSX . | Generate HTML from JS | Multi-line JSX | JSX Elements | If statements in React | JSX Syntax | . | Rendering | Events | props | State | . ",
    "url": "http://localhost:4000/react-basics.html",
    "relUrl": "/react-basics.html"
  },"6": {
    "doc": "React Patterns For Beginners",
    "title": "Starting",
    "content": "React by itself doesn’t make a complete application, so we use it as part of a bigger system. We still call it a “React App” beacuse…(?) React does the UI which may be the core of the app. And many of the other tools mentioned can be more or less transparent. This is roughly what a bigger system might look like and where React fits in: . | Tools are desinged to be used in a terminal environment. Expand… | React is available through npm, as well as other needed tools. npm is a company that runs a free JavaScript pacakge library and offers a free tool, also called npm, to access it. A “package” essentially is a directory that includes a package.json file. In practice, npm packages are usually JavaScript code and related files that can be added to a project as drop-in Modules. npm is owned by GitHub which is owned by Microsoft. | React code gets compiled before running on the client. Babel is a JavaScript compiler that compiles JSX to standard JavaScript, and compiles some of the JavaScript ES6 features being used into JavaScript that more clients can understand. | This code, as well as any other needed files, gets Bundled, for example by webpack. This part integrates all the different Modules into one app, and also includes things like preprocessing, minification, and any other preparation step. webpack also has a development server with live reloading. | . Building this way is generally referred to as “modern”. “Modern web development” is building “modern web apps” with “modern tools” or a modern “toolchain” or a modern “environment”. | Creating a Toolchain from Scratch - Create a New React App – React | Creating a React App… From Scratch. - Noteworthy - The Journal Blog | Create a New React App – React | nitishdayal/cra_closer_look: An explanation of the problems that Create-React-App addresses, and how it attempts to solve them. | Building a JavaScript Development Environment | Pluralsight | Build a JavaScript Dev Environment in One hour | coryhouse/javascript-development-environment: JavaScript development environment discussed in “Building a JavaScript Development Environment” on Pluralsight | . ",
    "url": "http://localhost:4000/react-patterns-1.html#starting",
    "relUrl": "/react-patterns-1.html#starting"
  },"7": {
    "doc": "React Patterns For Beginners",
    "title": "React Components",
    "content": "A React Component is a function that takes a props object and returns a JSX expression. Components should be reuseable. Small Components that are responsible for one thing are more reuseable. Components can be defined as functions or classes. Initially, only components defined as classes could use certain React features such as state. In recent versions, functional components have become more powerful. It is common practice to name classes in UpperCamelCase (unlike camelCase.) . A Component defined as a class must have a render() method, which must return something. The render function can also have code before the return statement. | [Classes - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) | . | ES6 In Depth: Classes - Mozilla Hacks - the Web developer blog | ES6 In Depth: Subclassing - Mozilla Hacks - the Web developer blog | 15. Classes | . ",
    "url": "http://localhost:4000/react-patterns-1.html#react-components",
    "relUrl": "/react-patterns-1.html#react-components"
  },"8": {
    "doc": "React Patterns For Beginners",
    "title": "Listing elements with .map()",
    "content": "Given an array of (anything), we can render it in JSX using the .map() function. Given an array and a function, it will run the function on every on the array, and return a new array with the results. The function we’ll give to .map() is like a JSX template that grabs values from the current element and fills them into a JSX expression. const people = ['Rowe', 'Prevost', 'Gare']; const peopleLis = people.map((person, i) =&gt; &lt;li key={'person_' + i}&gt;{person}&lt;/li&gt; ); . example from Codecademy . const numbers = [1, 2, 3, 4, 5]; const listItems = numbers.map((number) =&gt; &lt;li key={number.toString()}&gt; {number} &lt;/li&gt; ); . example from React docs .map() takes one argument, which is a function, but that function can take four arguments. Here we’re using the first two. The first paramater, currentValue, is given the argument person, so person will be the variable we use inside the function to refer to the value of the current element being processed in the array. The second is index, and we’re giving it i, so i will be the variable we can use inside the function to refer to the index of the current element. The index will be a unique value for each element in the array, so we can use it to assign unique keys to every JSX element we create. React will complain if we don’t add unique keys. According to the docs, “Keys should be given to the elements inside the array to give the elements a stable identity”. | Lists and Keys – React | | [Array.prototype.map() - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) | . | . ",
    "url": "http://localhost:4000/react-patterns-1.html#listing-elements-with-map",
    "relUrl": "/react-patterns-1.html#listing-elements-with-map"
  },"9": {
    "doc": "React Patterns For Beginners",
    "title": "State with Hooks",
    "content": "Hooks are a relatively late addition to React. They bring state to functional components. Previously state was only available for classes. This should make it easier to develop with React, becuause it avoids the issues related to classes. Expand… . ",
    "url": "http://localhost:4000/react-patterns-1.html#state-with-hooks",
    "relUrl": "/react-patterns-1.html#state-with-hooks"
  },"10": {
    "doc": "React Patterns For Beginners",
    "title": "Basic interactions",
    "content": " ",
    "url": "http://localhost:4000/react-patterns-1.html#basic-interactions",
    "relUrl": "/react-patterns-1.html#basic-interactions"
  },"11": {
    "doc": "React Patterns For Beginners",
    "title": "React Patterns For Beginners",
    "content": "Key patterns to use when building apps with React. | Starting | React Components | Listing elements with .map() | State with Hooks | Basic interactions | . ",
    "url": "http://localhost:4000/react-patterns-1.html",
    "relUrl": "/react-patterns-1.html"
  }
}
